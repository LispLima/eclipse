-*- Mode: Text; Syntax: ANSI-English; Package: CL-USER; Base: 10. -*-

                                   ECLIPSE

                                 Version 0.02
                                     $Id$

                 Copyright (C) 2000 - 2002 Iban HATCHONDO
                             <hatchond@yahoo.fr>



For complete instructions on how to use Eclipse, please read the manual.  This
file contains only intallation instructions and some other general
information.

Eclipse comes without ABSOLUTELY NO WARRANTY. See the COPYING file for
details.

I would love to receive feedback/comments/ideas/bugreports, so feel free to
send me any comments you might have.  See the mailing list at
http://lists.unlambda.com/mailman/listinfo/eclipse for the Eclipse development
community.


Finally, I have only compiled and tested Eclipse with CMUCL.  It should work
for other ANSI CL implementations, but the Makefile may have to be modified.
(I have tested it under Linux/x86 and on a Sun Solaris on an Ultra 1).


Requirements:
-------------

In order to use Eclipse, you need the following working on your machine:

 - Common Lisp (see http://www.cons.org/cmucl for a free implementation)
 - LOOP (it usually comes standard, at least for CMUCL and ACL)
 - CLX library (ANSI CL implementation of the X11 Protocol)
 - MK-Defsystem library (http://sourceforge.net/projects/clocc/)
 - GNOME (optional)

You can find all the Lisp parts in Debian packages
(http://www.debian.org/distrib/packages), I recommend using them.

 - A core image of the language that includes CLX and defsystem (and LOOP if
   needed).  See the core creation section for more information.

Note that the CLX version distributed with CMUCL up to and including version
18d has a bug.  The patch for this bug is contained in the file
'clx-patch.lisp' distributed with Eclipse.  The CLX version in CLOCC does not
have this bug, nor does the Debian distribution of CMUCL.  For compiling the
CLX distributed with CMUCL see the file #p"target:tools/clxcom.lisp".  (In
this case 'target' means the location of the CMUCL source code, which may not
be installed.)

Installation:
-------------

The following

  shell$ ./configure
  shell$ make
  shell$ make install

should work, at least for a typical CMUCL.

See `./configure --help` for options that can be used.  The particular
'--enable' and '--with' options recognized:

  --with-lisp=DIR or FILE         Your lisp program.

  --with-core=FILE                The particular core image to use if the
                                  default one is not appropriate.

  --enable-compile-into-core=FILE Core image name for compilation.
				  This is disabled by default.
				  Default core name: eclipse-lisp.core.

  --with-gnome-entry-dir=PATH     Path to the Gnome wm-properties directory.
				  This is enabled by default.
				  (Default search list:
					 /usr/share/gnome/wm-properties
					 /usr/local/share/gnome/wm-properties )

Core Creation:
--------------

Here is an example of creating a core for CMUCL:

CMU Common Lisp release x86-linux 2.4.22  3 October 2000 build 1154, running on localhost.localdomain
Send questions to cmucl-help@cons.org. and bug reports to cmucl-imp@cons.org.
Loaded subsystems:
    Python 1.0, target Intel x86
    CLOS based on PCL version:  September 16 92 PCL (f)
* (load "/usr/local/src/cmucl-2.4.22/subsystems/clx-library.x86f")

; Loading #p"/usr/local/src/cmucl-2.4.22/subsystems/clx-library.x86f".
T
* (load "/usr/local/src/cmucl-2.4.22/subsystems/defsystem-library.x86f")

; Loading #p"/usr/local/src/cmucl-2.4.22/subsystems/defsystem-library.x86f".
T
* (save-lisp "lisp-custom.core")
[Doing purification: Done.]
[Undoing binding stack... done]
[Saving current lisp image into lisp-custom.core:
Writing 20842624 bytes from the Read-Only space at 0x10000000.
Writing 2954992 bytes from the Static space at 0x28000000.
Writing 4096 bytes from the Dynamic space at 0x48000000.
done.]

Now create a symlink named 'lisp.core' in your standard CMUCL directory from
your custom image to start Lisp with the new image by default.  Otherwise you
can use the CMUCL shell option '-core'.  (See the "CMUCL User's Manual" for
more complete information.)


Local Variables:
fill-column: 78
mode: auto-fill
End:
