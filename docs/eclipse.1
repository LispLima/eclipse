.TH Eclipse 1 "(c) 2001 Iban HATCHONDO"
.\"$Id: eclipse.1,v 1.10 2003/12/02 19:07:07 ihatchondo Exp $

.SH NAME
eclipse - a window manager in Common Lisp


.SH SYNOPSIS
.B eclipse [ display specification ]


.SH DESCRIPTION
\fIeclipse\fP is a window manager for the X Window System. As a
window manager it provides most standard window managing features,
such as titlebar, icon management, keyboard shortcuts, and a powerful
interaction mode.

This program in usually started by the user's session manager or
startup script. When used from \fIxdm(1)\fP or \fIxinit(1)\fP without
a session manager, \fIeclipse\fP is frequently executed in the
foreground as the last client. When run this way eclipse causes the
session to be terminated. Otherwise the install adds a gnome entry in
the window manager section. To use eclipse under a gnome-session, use
the traditional way with the gnome-control-center (\fIgnomecc\fP).

In most cases, application windows are surrounded by a "frame" with
titlebar at the top and a special border around. The titlebar contains
the name of the application window and some buttons near the right
edge. Those buttons let you close, (un)maximize, and iconify the
window (in order form the right-most to the left-most). 

For the (un)maximization button, pressing pointer Button1 (usually the
left-most button unless it has been changed with \fIxmodmap\fP)
(un)maximizes the window in both directions (i.e., vertically and
horizontally). Pressing pointer Button2 (middle one) (un)maximizes
vertically, and of course pressing pointer Button3 (right-most)
(un)maximizes horizontally.

Windows are re-sized by pressing any pointer button on the window
border, dragging the pointer over the edge that is to be moved, and
releasing the pointer when desired. During this operation the window
is represented as a 3x3 grid that shows you the future window
geometry.
Similarly, windows are moved by pressing any pointer button on the
titlebar. Two modes are available : opaque or box (3x3 grid).

When new windows are created, \fIeclipse\fP will honor any size and
location information requested by the user (usually through the
\fI-geometry\fP command line argument or resources for the individual
applications). 

Some predefined keyboard shortcuts also exist (that are user
re-definable in the config file. See the keystroke section).

.TP
.B\-Alt-Tab\fP and \fBAlt-A\fP 
circulate window up and down.
.TP
.B\-Ctrl-Leftarrow\fP and \fBCtrl-Rightarrow\fP 
go to the previous or next workspace.
.TP
.B\-Ctrl-Alt-arrow\ 
move the pointer up, down, right, or left, depending of the "arrow"
key you pressed.
.TP
.B\-Ctrl-Alt-( z, w, x )\ 
emulate button-press. Use \fBz\fP for button1 and so on with \fBw\fP
\fBx\fP. This emulation does not work for re-sizing or moving windows,
nor does it work on the root-window.


.SH OPTIONS
\fIeclipse\fP accepts one argument. This argument allows you to
specify a particular display connection. To use this argument give it
as the DISPLAY environment variable. Use eclipse gandalf:2.0 for example


.SH MENUS
\fIeclipse\fP also provides three pop-up menus when pressing pointer
buttons on the root-window.

\-button1\ : a customizable application menu, that permits you to
launch your favorite applications.

\-button2\ : a recapitulation of the current running applications
(even if iconified) sorted by workspace. Selecting any application is
this menu will change the stacking order of that application to be on
top of the others and will change your current desktop if necessary. 

\-button3\ : four functions for managing windows : move, re-size, close,
destroy.


.SH CUSTOMIZATION
Two way of customizing \fIeclipse\fP exist.

The first one is by using the configuration file named
\fB$HOME/.eclipse\fP. If no local file can be found, \fIeclipse\fP will
use the built-in default file that can be found in the install
directory. \fBThis configuration file is written in Common
Lisp\fP. Future improvements may add a graphical user interface for
this file.

The second way to customize the window manager is by using the
\fBtelnet\fP server for it. (I guess it probably only works for CMUCL
at this time). To use it, do a \fBtelnet\fP on \fBport 6789\fP. The
password is \fB"clara"\fP (with the double quotes). I know there is a
problem of security with the port number and the password, but it will
be fixed in the future. 
The telnet will drop you in a lisp remote session that share its
environment with the Lisp session that is running the window
manager. Of course your modification will not be saved at the end of
the session, but you can \fBeasily\fP test some modifications that you
want to add in your config file, change in the code, or that you want
to send me for correcting bugs and/or add new features.

.SH VARIABLES & FUNCTIONS
Here are some variables that can be changed (either in the config file
or in the telnet session) :

.TP
.B\-*change-desktop-message-active-p*\ \fIboolean\fP (or t nil) 
If you want to be notified when the desktop changes this value should
be \fIt\fP. In that case, a change will display a small window with
the number or the name (if sets)  of the new desktop. If the value is
\fInil\fP, nothing will happen.
.TP
.B\-*move-mode*\ \fIkeyword\fP (or \fB:box :opaque\fP) 
As usual :box will draw a 3x3 grid to show you the window move ;
:opaque moves the window directly. (The box mode looks good on
laptops).
.TP
.B\-*resize-mode*\ \fIkeyword\fP (or \fB:box :opaque\fP) 
As usual :box will draw a 3x3 grid to show you the window resizing ;
:opaque resizes the window directly. (The box mode looks good on
laptops).
.TP
.B\-*verbose-move*\ \fIboolean\fP
If you want to have a small window that presents you the coordinates
of the the uper left corner of the window you are moving set it to
\fIt\fP otherwise \fInil\fP. The default value is \fIt\fP.
.TP
.B\-*verbose-resize*\ \fIboolean\fP
If you want to have a small window that presents you the sizes
of the window you are resizing set it to \fIt\fP otherwise
\fInil\fP. The default value is \fIt\fP.
.TP
.B\-*verbose-window-cycling*\ \fIboolean\fP
During window rotation, if set to \fIt\fP eclipse will display, in a
small window, the name of the focus window and its icon if
exist. Default value is \fIt\fP.
.TP
.B\-*cycle-icons-p*\ \fIboolean\fP
During window rotation, if set to \fIt\fP iconified window will be
included in the rotation. Default value is \fIt\fP. 
.TP
.B\-*warp-pointer-when-cycle*\ \fIboolean\fP
If set to \fIt\fP, the mouse pointer is warped around the upper-left
corner of the window that is virtually pointed to.  Otherwise, nothing 
happens. Useful when you work on a desktop with no overlapping
windows. The default value is \fIt\fP. 
.TP
.B\-*icon-hints*\ \fIboolean\fP
If set to \fIt\fP, eclipse will display small windows for representing
icons. If the iconified application provide a pixmap for its icon then
eclipse will display that pixmap in the icon window. Otherwise a part
of the application iconic name will be displayed. If you don't want
eclipse to display small window for icons just set it to
\fInil\fP. Default value is \fIt\fP. 
.TP
.B\-*screen-edge-resistant-p*\ \fIboolean\fP
Set it to \fInil\fP if you don't want to feel any resistance when
attempting to move a window outside the screen boundaries. Default
value is \fIt\fP.
.TP
.B\-*standard-window-edge-resistant-p*\ \fIboolean\fP
Set it to \fInil\fP if you don't want to feel any resistance on edges
of window(s) you are about to overlap. Default value is \fIt\fP.
.TP
.B\-*focus-when-window-cycle*\ \fIboolean\fP
If set to \fIt\fP the next window will be focused. Otherwise nothing 
happens. Useful when you work on a desktop with no overlapping
windows. The default value is \fIt\fP. 
.TP
.B\-*focus-new-mapped-window*\ \fIboolean\fP
If set to \fIt\fP newly mapped windows (or window comming from
iconified state) will ask for the focus. Otherwise nothing
happens. The default value is \fIt\fP.
.TP
.B\-*focus-type*\ \fIkeyword\fP (or \fB:none :on-click :when-switch\fP).

 \fB:none\fP focus change when enter/exit a window.
 \fB:on-click\fP focus change when click on a titlebar.
 \fB:when-switch\fP focus change when circulating window.

.TP
.B\-(setf decoration-theme) name &key free-old-theme-p\ \fIstring\fP
Change the theme. In general, for a list of all the themes that come
with \fIeclipse\fP, look in the directory called \fIthemes\fP. To use
any one of those present in that directory: just do \fB(setf
(decoration-theme) theme-name-string\fP. ("microGUI" for example).
But if the theme you want is not in the themes directory (because you
created it). Use the absolute pathname as the theme-name-string
argument of the \fB(setf decoration-theme)\fP for example:
"<$HOME>/tmp/my-new-theme". It also exists a "build-in" theme named
"no-decoration" that gives you undecorated windows. 
.TP
.B\-(setf number-of-virtual-screens) value\ \fIinteger\fP 
Indicate the number of virtual screens do you want.
.TP
.B\-(setf workspace-names) value\ \fIstring list\fP
To set the names of your workspaces. The length of the list of strings 
is suposed to be equal to the number of virtual screens.
.TP
.B\-(setf font-name) font-name-string\ \fIstring\fP
Sets the font used in title bar to display the application title.
The following pattern characters can be used for wildcard matching:
 \fB#\\*\fP Matches any sequence of zero or more characters. 
 \fB#\\?\fP  Matches any single character. 
For example, the pattern "T?mes Roman" matches the name "Times Roman"
but not the name "Thames Roman". However, the pattern "T*mes Roman"
matches both names. 
.TP
.B\-(setf maximize-modifier) value\ \fImodifier keyword\fP
Sets the modifier key that will be use to decide if we should maximize
the window (when pressing on the maximize button of a frame) with the
*maximize-fill*, if not down, or with (not *maximize-fill*), if down.

.SH THEMES
The image file format is \fBpnm P6\fP.
Here is a a decomposition of \fIeclipse\fP decorations :

       ________________________________
      |TL|MB         TOP       I M C|TR|
      |__|__________________________|__|
  __   ________________________________   __
 |TL| |TL|           TOP            |TR| |TR|
 |__| |__|__________________________|__| |__|
 |I | |  |                          |  | |I |
 |M | |  |                          |  | |M |
 |C | |  |                          |  | |C |
 |  | |  |                          |  | |  |
 |  | |  |                          |  | |  |
 |L | |L |                          |R | |R |
 |E | |E |                          |I | |I |
 |F | |F |                          |G | |G |
 |T | |T |                          |H | |H |
 |  | |  |                          |T | |T |
 |  | |  |                          |  | |  |
 |  | |  |                          |  | |  |
 |MB| |  |                          |  | |MB|
 |__| |__|__________________________|__| |__|
 |BL| |BL|          BOTTOM          |BR| |BR|
 |__| |__|__________________________|__| |__|
       ________________________________
      |BL|MB        BOTTOM     I M C|BR|
      |__|__________________________|__|

All part are optional.

Everything can be hilighted to reflect the focused state. You just
have to provide all necessary pnm files. For the push buttons MB menu
button, I iconify, M maximize, and C close, you can give four images
to reflect the button states: normal, focused, normal click and
focused click in that order.
The sizes of the buttons is not restricted. But they will be
considered as having the same height if your title bar is horizontal
(if vertical they will be considered as if they have the same width). 
.TP
.B\-size requirements\ 
TL height  = CENTER height = TR height
.br
BL height  = BOTTOM height = BR height

.TP
.B\-naming conventions\ 
Here is the corresponding table between file names and decoration parts: 


 part   |  file-name                     |  required

 TL        top-left.pnm                      no
 TR        top-right.pnm                     no
 BL        bottom-left.pnm                   no
 BR        bottom-right.pnm                  no
 TOP       top.pnm                           no
 BOTTOM    bottom.pnm                        no
 LEFT      left.pnm                          no
 RIGHT     right.pnm                         no

 I         iconify-normal.pnm                no 
           iconify-active.pnm                no
           iconify-normal-clicked.pnm        no
           iconify-active-clicked.pnm        no

 M         maximize-normal.pnm               no
           maximize-active.pnm               no
           maximize-normal-clicked.pnm       no
           maximize-active-clicked.pnm       no

 C         close-normal.pnm                  no
           close-active.pnm                  no
           close-normal-clicked.pnm          no
           close-active-clicked.pnm          no

MB         menu-button-normal.pnm            no
           menu-button-active.pnm            no
           menu-button-normal-clicked.pnm    no
           menu-button-active-clicked.pnm    no

.P
If you do not respect the recommendations above, there is no guarantee
concerning the resulting look and feel. 

.TP
.B\- Theme implemention notes\ 

.P
Themes are supposed to be defined in their own packages in a file
named theme.lisp.

Theme package definition must be supplied.

The naming convention for themes packages is:
<theme-name>-ECLIPSE-THEME. 
.br

Typically a theme package will export at least two symbols:
 - INITIALIZE-FRAME
 - REPAINT

Here is an example of how to define a theme (see our predefined
themes for more): 

.in +2
;;; -*- Mode: Lisp; Package: FOO-ECLIPSE-THEME -*-
.br
;;; GPL Disclaimer for example.
.br
;;; file theme.lisp
.br

(common-lisp:in-package :common-lisp-user)

(defpackage "FOO-ECLIPSE-THEME"
  (:use eclipse clx-ext common-lisp)
  (:size 10)
  (:export repaint initialize-frame)
  (:documentation
    "Foo theme decoration for the eclipse window manager. Written by ...")
  )

(in-package "FOO-ECLIPSE-THEME")

(define-theme "Foo"
.in +2
.br
((:default-style
.br
.in +3
(:title-bar-position :right)
.br
(:parts-to-redraw-on-focus (:close :top-left))
.br
(:top ("top"))
.br
(:close ("close-normal"
.br
.in +9
"close-active"
.br
"close-normal-clicked"
.br
"close-active-clicked"))
.br
.in -9
(:top-left ("top-left-inactive" "top-left-active"))
.br
(:top-right ("top-right"))
.br
(:bottom ("bottom"))
.br
(:bottom-right ("bottom-right"))
.br
(:bottom-left ("bottom-left"))
.br
(:right ("right"))
.br
(:left ("left")))
.br
.in -2
(:transient-style
.in +2
.br
;; the rest of the definition
.br
)))
.in -5

(defmethod repaint ((widget title-bar) (name (eql "Foo")) (focus t))
  "handle repaint WHEN focused."
  ;; do some stuff
  )

(defmethod repaint ((widget title-bar) (name (eql "Foo")) (focus null))
  "handle repaint WHEN NOT focused."
  ;; do some stuff
  )

(defun bar ()
  ;; do what you want
  )

;;; end of theme.lisp
.in -2

.SH KEYSTROKES & MOUSESTROKES

All customisations and definitions take place in the config file.
To define a keyboard shortcut, use the macro \fBdefine-key-combo\fP.
You can define as well some mouse shortcut. To do so use the macro
\fBdefine-mouse-combo\fP. 

\fBdefine-key-combo\fP keystroke-name \fB&key\fP key modifiers
(default-modifiers-p t) fun 

\fBdefine-mouse-combo\fP mousestroke-name \fB&key\fP button modifiers 
(default-modifiers-p t) fun 

.TP
.B\-{key, mouse}stroke-name\ \fIkeyword\fP 
a keyword that names your stroke.

.TP
.B\-keys\ \fIkeyword\fP \fIlist\fP
a keyword list representing the keyboard key. (see \fIkeysymdef.lisp\fP)

.TP
.B\-button\ \fI(or number :any)\fP
a mouse button number or :any to indicate all buttons.

.TP
.B\-modifiers\ \fIkeyword\fP \fIlist\fP
a keyword list representing the keyword key, or a modifier-mask
(unsigned-byte 8). If it is a list, it can be of two differents forms:

.in +2
- '(:and :mod1 :mod2 ...)
.br
 to indicate a combination of modifiers.
.br
- '(:mo1 :mod2)
.br
 to indicate different possible modifiers.
.in -2

.br
Use \fB0\fP instead of \fInil\fP to indicate no modifier.
.br
Use \fB:any\fP to indicate any subset of modifier keys. 

.TP
.B\-default-modifiers-p\ \fIboolean\fP
default value is \fIt\fP. It allows you to define keystrokes with or
without \fB:CAPS-LOCK\fP and \fB:NUM-LOCK\fP.

.TP
.B\-fun\ \fIfunction\fP
a designator for a function or method of one argument. Its argument
will be the keyboard event that occurred. (i.e. key-press key-release
type) You can also use the macro \fBaction\fP to create your function:

.in +2
\fBaction\fP (\fB&rest\fP forms1) (\fB&rest\fP forms2)

It simply checks for keywords \fB:press\fP or \fB:release\fP to be the
\fIcar\fP of the forms and creates function as follows:

.in +4
(action (:press form1 form2) ())
.br
(action () (:press form1 form2))
.in +3
==> (lambda (event) 
.br 
.in +6
(typepcase event
.br
.in +2 
(key-press form1 form2)
.br
(key-release nil)))
.in -8
.in -3


(action
.br
.in +2
(:release form1 form2)
.br
(:press another-form))
.in -2
.in +3
==> (lambda (event) 
.br 
.in +6
(typepcase event
.br
.in +2 
(key-press another-form)
.br
(key-release form1 form2)))
.in -8
.in -3

.in -4
.in -2

.P
There exist some predefined keystrokes:

  - change window priority on the current desktop
    :switch-win-up  
    :switch-win-down

  - change of desktop
    :switch-screen-left
    :switch-screen-right

  - move the mouse cursor
    :move-right
    :move-left
    :move-up 
    :move-down

  - perform mouse click
    :left-click
    :middle-click
    :right-click

There exist some predefined mousestrokes:

  - resize a window 
    :resize-window

  - move a window
    :move-window

\fBKeystroke customisation example\fP:

\fB- predifined keystrokes:\fP
.in +1

(define-key-combo :switch-win-up
  :keys '(:TAB)
  :modifiers '(:ALT-LEFT))

(define-key-combo :switch-win-d 
  :keys '(:A)
  :modifiers '(:ALT-LEFT))

(define-key-combo :move-right
  :keys '(:RIGHT)
  :modifiers '(:and :ALT-LEFT :CONTROL-LEFT))
.in -1

\fB- a user defined one:\fP
.in +1

(define-key-combo :raise-window-under-pointer
  :keys '(:F4)
  :modifiers 0 ; no modifiers.
  :default-modifiers-p nil 
  :fun (action 
.br
.in +9
(:press (put-on-top (lookup-windget (event-child event))))
.br
()))
.in -9

or

(define-key-combo :raise-window-under-pointer
  :keys '(:F4)
  :modifiers '(:CONTROL-LEFT :SHIFT-LEFT) ; or C-F4, C-F4
  :default-modifiers-p nil
  :fun #'(lambda (event)
.in +11
.br
(when (typep event 'key-press)
.in +2
.br
(put-on-top (lookup-windget (event-child event))))))
.in -13
.in -1

\fBMousestroke customisation example\fP:

The interface is exactly the same as for the keystrokes definitions so 
we'll only present an example of predefined mouse stroke.

(define-mouse-combo :move-window
.br
.in +2
:button 2
.br
:modifiers '(:SHIFT-LEFT :SHIFT-RIGHT))
.br
.in -2

.SH BUGS
The exit part is in progress so it does not work as expected.

Finally I have to write something to be fully gnome compliant: the
session-manager connection.


.SH SEE ALSO
\fBX\fP(1), \fBXserver\fP(1), \fBxdm\fP(1), \fBCMUCL\fP(1) or other
AINSI CL implemention you can use.


.SH AUTHOR
A project I began with three friends in 2000 and that I try to
finish.

  Julien BONINFANTE, Aymeric LACORTE, Jocelyn FRECHOT, 
Iban HATCHONDO <hatchond@yahoo.fr> 


.SH COPYRIGHT
Copyright (C) 2000,2001,2002,2003 Iban HATCHONDO <hatchond@yahoo.fr>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 2 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
